model User {
    id BigInt @id

    lastName  String? @map("last_name")
    firstName String? @map("first_name")
    username  String? @unique
    isPremium Boolean

    role Roles @default(REGULAR)

    account       Account?
    wallet        Wallet?
    refferAccount RefferAccount?

    Partner Partner? @relation(fields: [partner], references: [inviteCode])
    partner String?

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("users")
}

enum Roles {
    REGULAR
    ADMIN
    MANAGER
    INFLUENCER
}

model Account {
    id BigInt @id

    User User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    age                Float           @default(0)
    inviteCode         String          @unique @default(cuid())
    reffers            RefferAccount[]
    level              Int             @default(0)
    heSeeWelcomeScreen Boolean         @default(false)
    completedTasks     Task[]

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("accounts")
}

model Wallet {
    id BigInt @id

    User User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    coins   Int     @default(0)
    tickets Int     @default(0)
    reward  Reward?
    spins   Spin[]
    farms   Farm[]

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("wallets")
}

model RefferAccount {
    id BigInt @id

    User User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    earnedCoins   Int @default(0) @map("earned_coins")
    earnedTickets Int @default(0) @map("earned_tickets")

    oneWhoInvited BigInt
    OneWhoInvited Account @relation(fields: [oneWhoInvited], references: [id], onDelete: Cascade, onUpdate: Cascade)

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("reffers_accounts")
}

model Reward {
    id BigInt @id

    Wallet Wallet @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    lastReward  DateTime?
    coinsCount  Int?
    ticketCount Int?
    day         Int       @default(0)

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("rewards")
}

model Spin {
    id Int @id @default(autoincrement())

    amount Int
    type   SpinPrizes
    Wallet Wallet?    @relation(fields: [wallet], references: [id], onDelete: Cascade, onUpdate: Cascade)
    wallet BigInt?

    updatedAt DateTime @updatedAt @map("updated_at")
    createdAt DateTime @default(now()) @map("created_at")

    @@map("spins")
}

enum SpinPrizes {
    Ticket
    Coin
}
